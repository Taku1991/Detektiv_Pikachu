name: 🚀 Build and Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'          # Triggert bei Tags wie v1.0.0, v2.1.3, etc.
  workflow_dispatch:   # Erlaubt manuelles Triggern

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📝 Extract Tag Info
      id: tag_info
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Tag: $TAG"
        
    - name: 🎯 Create Release
      id: create_release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const tag = '${{ steps.tag_info.outputs.tag }}';
          
          const releaseBody = [
            '## 🚀 Detektiv Pikachu ' + tag,
            '',
            '### ✨ Neue Features & Verbesserungen',
            '- 🚀 **Performance-Optimierung**: Bis zu 70% schnellere Bot-Startzeit',
            '- ⚡ **Lazy Loading**: Manager werden erst bei Bedarf geladen', 
            '- 🔄 **Paralleles Cog-Loading**: Alle Extensions laden gleichzeitig',
            '- ⏱️ **Smart Timeouts**: Verhindert ewiges Warten beim Start',
            '- 📊 **Performance-Monitoring**: Zeigt genau an, wie lange der Start dauert',
            '',
            '### 📦 Download & Installation',
            'Die Windows-EXE wird automatisch gebaut und ist in wenigen Minuten verfügbar!',
            '',
            '---',
            '*Automatisch erstellt beim Tag-Push* 🤖'
          ].join('\n');
          
          try {
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: 'Detektiv Pikachu ' + tag,
              body: releaseBody,
              draft: false,
              prerelease: tag.includes('beta') || tag.includes('alpha')
            });
            
            console.log('Release erstellt: ' + release.data.html_url);
            return release.data.id;
          } catch (error) {
            console.error('Fehler beim Erstellen des Release:', error);
            throw error;
          }

  build-windows:
    runs-on: windows-latest
    needs: [create-release]
    if: always() && (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔨 Build Executables
      run: |
        python build_exe.py
        
    - name: 📁 Create Release Archive
      run: |
        $tagName = if ($env:GITHUB_REF -match '^refs/tags/(.+)$') { $matches[1] } else { "manual-build" }
        Compress-Archive -Path release\* -DestinationPath "DetektivPikachu-Windows-$tagName.zip"
        echo "ARCHIVE_NAME=DetektivPikachu-Windows-$tagName.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
        
    - name: 📊 Show Release Contents
      run: |
        Write-Host "=== Release Verzeichnis ===" -ForegroundColor Green
        Get-ChildItem release\ -Recurse | Select-Object Name, Length | Format-Table
        Write-Host "=== ZIP-Datei ===" -ForegroundColor Green
        Get-ChildItem $env:ARCHIVE_NAME | Select-Object Name, Length | Format-Table
        
    - name: 🔼 Upload to Release (Tag-Push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.ARCHIVE_NAME }}"
        token: ${{ secrets.PAT_TOKEN }}
        allowUpdates: true
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        tag: ${{ github.ref_name }}
        
    - name: 🔼 Upload to Release (Manual/Published)
      if: github.event_name == 'release'
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ env.ARCHIVE_NAME }}"
        token: ${{ secrets.PAT_TOKEN }}
        allowUpdates: true
        omitBodyDuringUpdate: true
        omitNameDuringUpdate: true
        
    - name: 📤 Upload Build Artifact (for manual runs)
      uses: actions/upload-artifact@v4
      if: github.event_name == 'workflow_dispatch'
      with:
        name: DetektivPikachu-Windows-Build
        path: "${{ env.ARCHIVE_NAME }}"
        retention-days: 30

  update-release-notes:
    runs-on: ubuntu-latest
    needs: [build-windows, create-release]
    if: always() && (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: 📝 Update Release Notes
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          
          // Finde das Release
          let release;
          if (context.eventName === 'release') {
            release = await github.rest.repos.getRelease({
              owner,
              repo,
              release_id: context.payload.release.id
            });
          } else {
            // Tag-basiert - finde Release by Tag
            const tag = context.ref.replace('refs/tags/', '');
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: tag
              });
            } catch (error) {
              console.log('Release nicht gefunden, überspringe Update');
              return;
            }
          }
          
          const tagName = release.data.tag_name;
          const additionalNotes = [
            '',
            '',
            '## 📦 Installation (Windows EXE)',
            '',
            '1. **Lade die ZIP-Datei herunter**: `DetektivPikachu-Windows-' + tagName + '.zip`',
            '2. **Entpacke** die Datei in einen Ordner deiner Wahl',
            '3. **Starten**: Doppelklick auf `Detektiv_Pikachu_starten.bat` oder `DetektivPikachu.exe`',
            '4. **Erste Einrichtung**: Bot fragt automatisch nach den Bot-Tokens',
            '5. **Fertig**: Bot startet automatisch nach der Eingabe',
            '',
            '## 📂 Verzeichnisstruktur nach Installation',
            '',
            '```',
            'DetektivPikachu/',
            '├── 🚀 DetektivPikachu.exe              # Haupt-EXE (All-in-One)',
            '├── 📁 _internal/                       # PyInstaller Dependencies',
            '├── 🎯 Detektiv_Pikachu_starten.bat    # Einfaches Start-Skript',
            '├── 📁 data/                            # Bot-Daten (automatisch erstellt)',
            '│   ├── json/                           # Status & Verlauf',
            '│   ├── logs/                           # Log-Dateien',
            '│   └── gif/                            # GIF-Cache',
            '├── 📄 .env                             # Konfiguration (automatisch erstellt)',
            '├── 📄 README.md                        # Vollständige Dokumentation',
            '└── 📄 LICENSE                          # MIT Lizenz',
            '```',
            '',
            '## 🚀 Super-Schnellstart (nur 3 Schritte!)',
            '',
            '1. **ZIP entpacken**',
            '2. **Detektiv_Pikachu_starten.bat** ausführen',
            '3. **Bot-Tokens eingeben** (nur beim ersten Mal)',
            '',
            '**Das war\'s!** ��',
            '',
            '## 🔧 Performance-Verbesserungen in dieser Version',
            '',
            '- ⚡ **70% schnellere Startzeit** durch optimierte Initialisierung',
            '- 🔄 **Paralleles Laden** aller Bot-Komponenten',
            '- 🎯 **Lazy Loading** - Komponenten werden erst bei Bedarf geladen',
            '- ⏱️ **Smart Timeouts** - Bot hängt sich nicht mehr beim Start auf',
            '- 📊 **Detailliertes Performance-Monitoring** in den Logs',
            '',
            '## 🔑 Bot-Tokens erstellen',
            '',
            '1. Gehe zu [Discord Developer Portal](https://discord.com/developers/applications)',
            '2. Erstelle zwei neue Applications',
            '3. Gehe zu "Bot" → "Reset Token" für jeden Bot',
            '4. Kopiere die Tokens und gib sie beim ersten Start ein',
            '',
            '## 🐛 Problembehandlung',
            '',
            '- **Token-Probleme**: Lösche die `.env` Datei und starte erneut für neue Token-Eingabe',
            '- **"Import Error"**: Nutze die EXE-Version oder installiere `pip install -r requirements.txt`',
            '- **Bot startet nicht**: Überprüfe Internetverbindung und Token-Gültigkeit',
            '- **Weitere Hilfe**: [Discord Server](https://discord.gg/pokemonhideout)'
          ].join('\n');
          
          await github.rest.repos.updateRelease({
            owner,
            repo,
            release_id: release.data.id,
            body: release.data.body + additionalNotes
          });
          
          console.log('Release Notes aktualisiert für ' + tagName);